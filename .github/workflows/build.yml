name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      kernel_url:
        description: 'Kernel GitHub URL'
        required: true
        default: 'https://github.com/Blacksmithyogi/kernel_xiaomi_courbet.git'
        type: string
      kernel_branch:
        description: 'Kernel branch'
        required: true
        default: 'A15'
        type: string
      recurse_submodule:
        description: 'Clone submodules (true/false)'
        required: true
        default: false
        type: boolean
      is_release:
        description: 'Create GitHub release (true/false)'
        required: true
        default: false
        type: boolean

jobs:
  Build-Kernel:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      KERNEL_NAME: "courbet"
      KERNEL_DIR: "courbet-kernel"
      ARCH: "arm64"
      KERNEL_URL: ${{ github.event.inputs.kernel_url }}
      KERNEL_BRANCH: ${{ github.event.inputs.kernel_branch }}
      RECURSE_SUBMODULE: ${{ github.event.inputs.recurse_submodule }}
      IS_RELEASE: ${{ github.event.inputs.is_release }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install -y \
          git bc bison flex libssl-dev make automake build-essential \
          curl zip clang lld gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi

    - name: Clone kernel source
      run: |
        if [ "$RECURSE_SUBMODULE" = "true" ]; then
          git clone --recurse-submodules $KERNEL_URL -b $KERNEL_BRANCH $KERNEL_DIR
        else
          git clone $KERNEL_URL -b $KERNEL_BRANCH $KERNEL_DIR
        fi   
        
    - name: Build kernel
      run: |
        SECONDS=0  # Start timing the build
        cd $KERNEL_DIR
        export ARCH=$ARCH
        make O=out ${KERNEL_NAME}_defconfig

        # Extract LOCALVERSION from .config
        LOCALVERSION=$(grep -Po '(?<=CONFIG_LOCALVERSION=")[^"]*' out/.config || echo "")
        echo "LOCALVERSION=$LOCALVERSION" >> $GITHUB_ENV

        make -j$(nproc --all) O=out EXTRAVERSION="" CC=clang \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          CONFIG_NO_ERROR_ON_MISMATCH=y

        # Save build time and kernel version
        BUILD_TIME=$(date '+%Y%m%d-%H%M%S')
        KERNEL_VERSION=$(make kernelversion)
        echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_ENV
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

        # Copy kernel artifacts
        mkdir -p $GITHUB_WORKSPACE/output
        cp out/arch/arm64/boot/Image.gz $GITHUB_WORKSPACE/output/
        cp out/arch/arm64/boot/dtb.img $GITHUB_WORKSPACE/output/
        cp out/arch/arm64/boot/dtbo.img $GITHUB_WORKSPACE/output/

    - name: Package kernel (AnyKernel3)
      run: |
        git clone https://github.com/Blacksmithyogi/AnyKernel3.git -b Smirnoff
        cp output/* AnyKernel3/
        cd AnyKernel3

        # Include LOCALVERSION in the ZIP file name (if it exists)
        if [ -n "$LOCALVERSION" ]; then
          zip -r9 ../kernel-$KERNEL_VERSION$LOCALVERSION-$BUILD_TIME.zip * -x .git README.md *placeholder
        else
          zip -r9 ../kernel-$KERNEL_VERSION-$BUILD_TIME.zip * -x .git README.md *placeholder
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-$KERNEL_VERSION$LOCALVERSION
        path: kernel-$KERNEL_VERSION$LOCALVERSION-$BUILD_TIME.zip

    - name: Get latest commit hash
      id: get_hash
      run: |
        HASH=$(git -C $KERNEL_DIR rev-parse --short HEAD)
        echo "HASH=$HASH" >> $GITHUB_ENV

    - name: Upload to Telegram
      run: |
        if [ -n "$LOCALVERSION" ]; then
          curl -F document=@"kernel-$KERNEL_VERSION$LOCALVERSION-$BUILD_TIME.zip" \
               -F caption="Kernel Build Success! Version: $KERNEL_VERSION$LOCALVERSION, Build Time: $BUILD_TIME✅ Completed in $((SECONDS / 60)) minute(s) and $((SECONDS % 60)) second(s)! Latest commit: $HASH" \
               https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
        else
          curl -F document=@"kernel-$KERNEL_VERSION-$BUILD_TIME.zip" \
               -F caption="Kernel Build Success! Version: $KERNEL_VERSION, Build Time: $BUILD_TIME ✅ Completed in $((SECONDS / 60)) minute(s) and $((SECONDS % 60)) second(s)! Latest commit: $HASH" \
               https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}
        fi
